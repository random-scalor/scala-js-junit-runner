<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.carrotgarden.a</groupId>
        <artifactId>carrot-a</artifactId>
        <version>0-SNAPSHOT</version>
        <relativePath>.mvn</relativePath>
    </parent>

    <groupId>com.carrotgarden.sjs</groupId>
    <artifactId>scala-js-junit-tools</artifactId>
    <version>${revision}</version>

    <name></name>
    <description></description>

    <url>https://github.com/random-scalor/scala-js-junit-tools</url>
    <scm>
        <url>https://github.com/random-scalor/scala-js-junit-tools</url>
        <connection>scm:git:git@github.com:random-scalor/scala-js-junit-tools.git</connection>
        <developerConnection>scm:git:git@github.com:random-scalor/scala-js-junit-tools.git</developerConnection>
    </scm>

    <licenses>
        <license>
            <name>Apache-2.0</name>
        </license>
    </licenses>

    <properties>

        <!-- Release series. -->
        <release.epoch>1.0.1</release.epoch>

        <!-- Development releases repository. -->
        <bintray.subject>random-scalor</bintray.subject>
        <bintray.repository>maven</bintray.repository>

        <!-- JUnit old and new. -->
        <version.junit.vintage>4.12.3</version.junit.vintage>
        <version.junit.jupiter>5.0.3</version.junit.jupiter>
        <version.junit.platform>1.0.3</version.junit.platform>

        <!-- Scala.js stack. -->
        <version.sjs.epoch>0.6</version.sjs.epoch>
        <version.sjs.release>${version.sjs.epoch}.21</version.sjs.release>

        <!-- Provision resources -->
        <test-tool.dir>${project.basedir}/test-tool</test-tool.dir>
        <test-tool.node.dir>${test-tool.dir}/node</test-tool.node.dir>
        <test-tool.node.exec>${test-tool.node.dir}/node</test-tool.node.exec>
        <test-tool.phantom.dir>${test-tool.dir}/phantomjs</test-tool.phantom.dir>
        <test-tool.phantom.exec>${test-tool.phantom.dir}/phantomjs</test-tool.phantom.exec>

    </properties>

    <profiles>

        <profile>
            <id>repo-jcenter</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-jcenter.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <id>jcenter</id>
                    <url>http://jcenter.bintray.com</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>jcenter</id>
                    <url>http://jcenter.bintray.com</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <profile>
            <id>tester</id>
            <activation>
                <property>
                    <name>[ACTIVATION:MVELSCRIPT]</name>
                    <value>
<![CDATA[
    if( isdef m2e.version ) {
        System.out.println("[CODE] m2e.version=" + m2e.version);
        false
    } else {
        System.out.println("[CODE] m2e.version missing");
        false;
    }
]]>
                    </value>
                </property>
            </activation>
        </profile>

    </profiles>

    <dependencies>

        <!-- Note: keep order. -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-js</groupId>
            <artifactId>scalajs-junit-test-runtime_${version.scala.epoch}</artifactId>
            <version>${version.sjs.release}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-js</groupId>
            <artifactId>scalajs-library_${version.scala.epoch}</artifactId>
            <version>${version.sjs.release}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
        </dependency>

        <dependency>
            <groupId>org.scala-js</groupId>
            <artifactId>scalajs-dom_${version.sjs.library}</artifactId>
            <version>0.9.4</version>
        </dependency>

        <!-- Frankenlib: 0.6.x is unusable. -->
        <dependency>
            <groupId>org.scala-js</groupId>
            <artifactId>scalajs-sbt-test-adapter_${version.scala.epoch}</artifactId>
            <version>1.0.0-M2</version>
            <!-- <version>${version.sjs.release}</version> -->
        </dependency>

        <dependency>
            <groupId>org.scala-js</groupId>
            <artifactId>scalajs-js-envs_${version.scala.epoch}</artifactId>
            <version>${version.sjs.release}</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-runner</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Native JS> -->
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>jquery</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Scala.js facade. -->
        <dependency>
            <groupId>be.doeraene</groupId>
            <artifactId>scalajs-jquery_${version.sjs.library}</artifactId>
            <version>0.9.2</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>

        <plugins>

            <!-- Provision Phantom.js -->
            <plugin>
                <groupId>com.github.klieber</groupId>
                <artifactId>phantomjs-maven-plugin</artifactId>
                <version>0.7</version>
                <configuration>
                </configuration>
                <executions>
                    <execution>
                        <id>install-phantom</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install</goal>
                        </goals>
                        <configuration>
                            <version>2.1.1</version>
                            <propertyName>phantomjs.binary</propertyName>
                            <outputDirectory>${test-tool.phantom.dir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Provision Phantom.js -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>install-phantom</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target name="install-phantom">
                                <mkdir dir="${test-tool.phantom.dir}" />
                                <copy file="${phantomjs.binary}" tofile="${test-tool.phantom.exec}" />
                                <chmod file="${test-tool.phantom.exec}" perm="u+rx" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Provision Node.js -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.6</version>
                <configuration>
                    <installDirectory>${test-tool.dir}</installDirectory>
                    <!-- <environmentVariables> -->
                    <!-- <NODE_PATH></NODE_PATH> -->
                    <!-- </environmentVariables> -->
                    <nodeDownloadRoot>http://nodejs.org/dist/</nodeDownloadRoot>
                    <npmDownloadRoot>http://registry.npmjs.org/npm/-/</npmDownloadRoot>
                    <npmRegistryURL>http://registry.npmjs.org/</npmRegistryURL>
                </configuration>
                <executions>
                    <execution>
                        <id>install-node</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>v9.4.0</nodeVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-source-map</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>
<![CDATA[
    install npm@5.6.0 jsdom@11.6.0 source-map-support@0.5.2 --prefix ${test-tool.dir}/node
]]>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.carrotgarden.maven</groupId>
                <artifactId>scalor-maven-plugin_2.12</artifactId>
                <!-- <version>Maven will resolve to latest</version> -->

                <dependencies>
                    <!-- <dependency> -->
                    <!-- <groupId>org.scala-js</groupId> -->
                    <!-- <artifactId>scalajs-cli_${version.scala.epoch}</artifactId> -->
                    <!-- <version>${version.sjs.epoch}</version> -->
                    <!-- </dependency> -->
                </dependencies>

                <configuration>

                    <!-- <eclipseLogClasspathOrder>true</eclipseLogClasspathOrder> -->

                    <zincCompileOptions>
                        -feature ; -unchecked ; -deprecation ;
                        -encoding ;
                        ${project.build.sourceEncoding} ;
                        -target:jvm-${maven.compiler.target} ;
                        -Xmaxerrs ; 20 ;
                        -compileorder:Mixed ;
                        -useScopesCompiler ;
                    </zincCompileOptions>

                    <!-- <zincLogProjectClassPath>true</zincLogProjectClassPath> -->
                    <!-- <zincLogProgressRate>true</zincLogProgressRate> -->
                    <!-- <zincLogProgressUnit>true</zincLogProgressUnit> -->

                    <definePluginList>
                        <dependency>
                            <groupId>org.scala-js</groupId>
                            <artifactId>scalajs-compiler_${version.scala.release}</artifactId>
                            <version>${version.sjs.release}</version>
                        </dependency>
                        <!-- Convert JUnit annotations to JS meta data. -->
                        <dependency>
                            <groupId>org.scala-js</groupId>
                            <artifactId>scalajs-junit-test-plugin_${version.scala.release}</artifactId>
                            <version>${version.sjs.release}</version>
                        </dependency>
                    </definePluginList>

                </configuration>

                <executions>
                    <execution>
                        <goals>
                            <!-- -->
                            <goal>eclipse-config</goal>
                            <!-- -->
                            <goal>register-main</goal>
                            <goal>register-test</goal>
                            <!-- -->
                            <goal>compile-main</goal>
                            <goal>compile-test</goal>
                            <!-- -->
                            <goal>scala-js-link-main</goal>
                            <!-- <goal>scala-js-link-test</goal> -->
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <!-- Produce clean deployment pom.xml. -->
            <plugin>
                <groupId>com.carrotgarden.maven</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <targetPomFile>${project.build.directory}/flatten/pom.xml.flatten</targetPomFile>
                </configuration>
            </plugin>

            <!-- <plugin> -->
            <!-- <groupId>org.apache.maven.plugins</groupId> -->
            <!-- <artifactId>maven-surefire-plugin</artifactId> -->
            <!-- </plugin> -->

            <!-- Invoke integration tests. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-invoker-plugin</artifactId>
                <configuration>
                    <showErrors>true</showErrors>
                    <streamLogs>true</streamLogs>
                    <localRepositoryPath>${project.basedir}/test-repo</localRepositoryPath>
                    <pomIncludes>
                        <include>test-xxx/pom.xml</include>
                    </pomIncludes>
                </configuration>
            </plugin>

            <!-- Control JUnit test order. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <runOrder>alphabetical</runOrder>
                </configuration>
            </plugin>

        </plugins>

        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven
                    build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-invoker-plugin</artifactId>
                                        <versionRange>[0,)</versionRange>
                                        <goals>
                                            <goal>install</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

    </build>

</project>
